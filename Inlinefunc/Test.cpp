// 内联函数
// 用inline修饰的函数  编译时C++编译器会在调用内联函数的地方展开
// 没有函数压栈的开销  提升程序的运行效率
#include<iostream>
using namespace std;

// 解决频繁调用Swap_cpp函数，函数调用需要建立栈帧、消耗过大的问题。
inline void Swap_cpp(int& a, int& b){
	int temp = a;
	a = b;
	b = temp;
}

int main(){
	int a = 10;
	int b = 20;
	Swap_cpp(a, b);

	return 0;
}

// 注意：
// 内联函数是一种以空间换时间的做法（代码很长、递归、循环不适用）
// 编译器自动优化 编译器选择是否使用内联
// 内联函数不建议声明和定义分离（内联函数展开没有地址，链接会找不到）

// 宏的优点：增强代码的复用性 提高性能
// 宏的缺点：不方便调试（预处理阶段宏替换） 可读性差 没有类型安全的检查

// C++：定义常量换用const
// C++：函数定义换用内联函数